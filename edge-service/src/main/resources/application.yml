spring:
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  cloud:
    config:
      uri: http://localhost:8888
      request-connect-timeout: 5000
      request-read-timeout: 5000
      fail-fast: true
      retry:
        max-attempts: 6
        initial-interval: 1000
        max-interval: 2000
        multiplier: 1.1
      name: ${spring.application.name}
    gateway:
      routes:
        # Public Aggregator Routes
        - id: aggregator-customers
          uri: ${AGGREGATOR_SERVICE_URL:http://localhost:8080}
          predicates:
            - Path=/api/aggregator/customers/**
          filters:
            - StripPrefix=2
            - name: CircuitBreaker
              args:
                name: aggregatorCustomersCircuitBreaker
                fallbackUri: forward:/aggregator/customers-fallback

        - id: aggregator-products
          uri: ${AGGREGATOR_SERVICE_URL:http://localhost:8080}
          predicates:
            - Path=/api/aggregator/products/**
          filters:
            - StripPrefix=2
            - name: CircuitBreaker
              args:
                name: aggregatorProductsCircuitBreaker
                fallbackUri: forward:/aggregator/products-fallback

        - id: aggregator-transactions
          uri: ${AGGREGATOR_SERVICE_URL:http://localhost:8080}
          predicates:
            - Path=/api/aggregator/transactions/**
          filters:
            - StripPrefix=2
            - name: CircuitBreaker
              args:
                name: aggregatorTransactionsCircuitBreaker
                fallbackUri: forward:/aggregator/transactions-fallback

        - id: aggregator-properties
          uri: ${AGGREGATOR_SERVICE_URL:http://localhost:8080}
          predicates:
            - Path=/api/aggregator/properties/**
          filters:
            - StripPrefix=2
            - name: CircuitBreaker
              args:
                name: aggregatorPropertiesCircuitBreaker
                fallbackUri: forward:/aggregator/properties-fallback
      httpclient:
        connect-timeout: 2000
        response-timeout: 5s
        pool:
          type: elastic
          max-idle-time: 15s
          max-life-time: 60s
      default-filters:
        - SaveSession
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException, org.springframework.web.reactive.function.client.WebClientResponseException.GatewayTimeout, org.springframework.web.reactive.function.client.WebClientResponseException.InternalServerError
            backoff:
              firstBackoff: 50ms
              maxBackoff: 500ms
              factor: 2
              basedOnPreviousValue: false
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
             replenishRate: 10
             burstCapacity: 20
             requestedTokens: 1
  data:
    redis:
      connect-timeout: 2s
      host: localhost
      port: 6379
      timeout: 1s
  session:
    store-type: redis
    timeout: 10m
    redis:
      namespace: app:edge
  config:
    import: "optional:configserver:"




server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful

management:
  endpoints:
    web:
      exposure:
        include: health, info, refresh
  endpoint:
    health:
      show-details: always

resilience4j:
  circuitbreaker:
    configs:
      default:
        sliding-window-size: 20
        permitted-number-of-calls-in-half-open-state: 5
        failure-rate-threshold: 50
        wait-duration-in-open-state: 15000
  timelimiter:
    configs:
      default:
        timeout-duration:
          seconds: 5


logging:
  level:
    io.github.resilience4j: DEBUG
